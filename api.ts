/* tslint:disable */
/* eslint-disable */
/**
 * Authorization service
 * Authorization Service contract
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Claims
 */
export interface Claims {
    /**
     * 
     * @type {string}
     * @memberof Claims
     */
    'sub'?: string;
    /**
     * 
     * @type {string}
     * @memberof Claims
     */
    'iss'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Claims
     */
    'authorities'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Claims
     */
    'exp'?: string;
}
/**
 * 
 * @export
 * @interface ListUserResponse
 */
export interface ListUserResponse extends Array<User> {
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Token}
     * @memberof LoginResponse
     */
    'token'?: Token;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error code of the issue.
     * @type {string}
     * @memberof ModelError
     */
    'errorCode': string;
    /**
     * Detailed descrition of the issue.
     * @type {string}
     * @memberof ModelError
     */
    'description': string;
    /**
     * The occurance time of the issue.
     * @type {string}
     * @memberof ModelError
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'severity'?: ModelErrorSeverityEnum;
}

export const ModelErrorSeverityEnum = {
    Unprioratized: 'Unprioratized',
    Low: 'Low',
    Medium: 'Medium',
    High: 'High',
    Critical: 'Critical',
    Fatal: 'Fatal'
} as const;

export type ModelErrorSeverityEnum = typeof ModelErrorSeverityEnum[keyof typeof ModelErrorSeverityEnum];

/**
 * 
 * @export
 * @interface SuccessLogin
 */
export interface SuccessLogin {
    /**
     * 
     * @type {string}
     * @memberof SuccessLogin
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {Claims}
     * @memberof Token
     */
    'claims'?: Claims;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'expirationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'jwtid'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'audience'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'issueTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'notBeforeTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used to check the token signature from another microservice
         * @summary Check the token signature
         * @param {string} [xTOKEN] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkToken: async (xTOKEN?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/check_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xTOKEN != null) {
                localVarHeaderParameter['X-TOKEN'] = String(xTOKEN);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of users
         * @summary Get the list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with a user
         * @summary Login a user
         * @param {User} user Login user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('login', 'user', user)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a user
         * @summary Register a user
         * @param {User} user Create a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('registerUser', 'user', user)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is used to check the token signature from another microservice
         * @summary Check the token signature
         * @param {string} [xTOKEN] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkToken(xTOKEN?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkToken(xTOKEN, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of users
         * @summary Get the list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login with a user
         * @summary Login a user
         * @param {User} user Login user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessLogin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register a user
         * @summary Register a user
         * @param {User} user Create a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * This endpoint is used to check the token signature from another microservice
         * @summary Check the token signature
         * @param {string} [xTOKEN] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkToken(xTOKEN?: string, options?: any): AxiosPromise<Token> {
            return localVarFp.checkToken(xTOKEN, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of users
         * @summary Get the list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<ListUserResponse> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Login with a user
         * @summary Login a user
         * @param {User} user Login user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: User, options?: any): AxiosPromise<SuccessLogin> {
            return localVarFp.login(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a user
         * @summary Register a user
         * @param {User} user Create a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(user: User, options?: any): AxiosPromise<User> {
            return localVarFp.registerUser(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * This endpoint is used to check the token signature from another microservice
     * @summary Check the token signature
     * @param {string} [xTOKEN] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public checkToken(xTOKEN?: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).checkToken(xTOKEN, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of users
     * @summary Get the list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with a user
     * @summary Login a user
     * @param {User} user Login user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public login(user: User, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).login(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a user
     * @summary Register a user
     * @param {User} user Create a new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerUser(user: User, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registerUser(user, options).then((request) => request(this.axios, this.basePath));
    }
}


